/**********************************************************
 * @file    font.h
 * @author  M.Brugman (mattb@linux.com)
 * @license MIT (see license.txt)
 **********************************************************
 * A 5x7 bitmap font.  Here's how it works:
 *  + Each character is 5 bytes long; one byte for each
 *    display column
 *  + The 7 least significant bits are the pixels in that
 *    column
 * 
 * Consider a single character uint8_t C[5].  Bit zero
 * of byte zero is the upper left pixel in the character.
 * Bit 1 of byte zero is the second pixel down in left-
 * most column; all the way down to bit 7.
 * Bit 0 of byte 1 is the top pixel in the second column
 * from the left and so on.
 * 
 * So, the mapping of character 0x36 (numeral '4') looks 
 * like this:
 * 
 *      01234 (BYTE) 
 *    0   XX
 *    1  X X
 *  B 2 X  X
 *  I 3 XXXXX
 *  T 4    X
 *    5    X
 *    6    X
 *    7 NOT USED
 * 
 *   BYTE 0: 0x0c
 *        1: 0x0a
 *        2: 0x09
 *        3: 0x7f
 *        4: 0x08
 * 
 * The array of characters is stored as const PROGMEM, 
 * which means they are stored in FLASH memory instead of
 * RAM.  This is handy, because the entire array is 640
 * bytes long, which is more than 1/4 of the entire RAM
 * available on the microcontroller.
 * 
 * The downside is that it takes special instructions to
 * copy from FLASH to RAM.  Copying a single 5-byte
 * character takes a little over 5us (microseconds).
**********************************************************/
#ifndef FONT_H_
#define FONT_H_


const uint8_t font5x7[][5] PROGMEM = {{0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x00 NULL
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x01 Start of heading (SOH)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x02 Start of text (STX)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x03 End of text (ETX)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x04 End of transmit (EOT)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x05 Enquiry (ENQ)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x06 Ackknowledge (ACK)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x07 Bell (BEL)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x08 Backspace (BS)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x09 Horizontal tab (HT)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x0a Linefeed (LF)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x0b Vertical tab (VT)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x0c Formfeed (FF)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x0d Carriage return (CR)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x0e Shift out (SO)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x0f Shift in (SI)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x10 Dataline escape (DLE)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x11 Device control 1 (DC1)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x12 Device control 2 (DC2)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x13 Device control 3 (DC3)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x14 Device control 4 (DC4)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x15 Negative acknowledge (NAK)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x16 Synchronous idle (SYN)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x17 End of transmit block (ETB)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x18 Cancel (CAN)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x19 End of medium (EM)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x1a Substitute (SUB)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x1b Escape (ESC)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x1c File separator (FS)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x1d Group separator (GS)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x1e Record separator (RS)
                        {0x55, 0x2a, 0x55, 0x2a, 0x55}, // 0x1f Unit separator (US)
                        {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x20 Space
                        {0x00, 0x00, 0x5f, 0x00, 0x00}, // 0x21 '!'
                        {0x00, 0x03, 0x00, 0x03, 0x00}, // 0x22 '"' (double quote)
                        {0x14, 0x7f, 0x14, 0x7f, 0x14}, // 0x23 '#'
                        {0x04, 0x2a, 0x7f, 0x2a, 0x10}, // 0x24 '$'
                        {0x63, 0x13, 0x08, 0x64, 0x63}, // 0x25 '%'
                        {0x36, 0x49, 0x59, 0x26, 0x50}, // 0x26 '&'
                        {0x00, 0x00, 0x03, 0x00, 0x00}, // 0x27 ''' (single quote)
                        {0x00, 0x00, 0x3e, 0x41, 0x00}, // 0x28 '('
                        {0x00, 0x41, 0x3e, 0x00, 0x00}, // 0x29 ')'
                        {0x2a, 0x1c, 0x7f, 0x1c, 0x2a}, // 0x2a '*'
                        {0x08, 0x08, 0x3e, 0x08, 0x08}, // 0x2b '+'
                        {0x00, 0x58, 0x38, 0x00, 0x00}, // 0x2c ','
                        {0x08, 0x08, 0x08, 0x08, 0x08}, // 0x2d ','
                        {0x00, 0x60, 0x60, 0x00, 0x00}, // 0x2e ','
                        {0x60, 0x10, 0x08, 0x04, 0x03}, // 0x2f ','
                        {0x3e, 0x51, 0x49, 0x45, 0x3e}, // 0x30 '0'
                        {0x40, 0x42, 0x7f, 0x40, 0x40}, // 0x31 '1'
                        {0x42, 0x61, 0x51, 0x49, 0x46}, // 0x32 '2'
                        {0x22, 0x49, 0x49, 0x49, 0x36}, // 0x33 '3'
                        {0x0c, 0x0a, 0x09, 0x7f, 0x08}, // 0x34 '4'
                        {0x4f, 0x49, 0x49, 0x49, 0x31}, // 0x35 '5'
                        {0x3e, 0x51, 0x49, 0x49, 0x32}, // 0x36 '6'
                        {0x01, 0x01, 0x71, 0x0d, 0x03}, // 0x37 '7'
                        {0x36, 0x49, 0x49, 0x49, 0x36}, // 0x38 '8'
                        {0x26, 0x49, 0x49, 0x49, 0x3e}, // 0x39 '9'
                        {0x00, 0x36, 0x36, 0x00, 0x00}, // 0x3a ':'
                        {0x00, 0x36, 0x76, 0x00, 0x00}, // 0x3b ';'
                        {0x08, 0x14, 0x22, 0x41, 0x00}, // 0x3c '<'
                        {0x14, 0x14, 0x14, 0x14, 0x14}, // 0x3d '='
                        {0x00, 0x41, 0x22, 0x14, 0x08}, // 0x3e '>'
                        {0x02, 0x01, 0x51, 0x09, 0x06}, // 0x3f '?'
                        {0x3e, 0x41, 0x5d, 0x55, 0x1e}, // 0x40 '@'
                        {0x78, 0x16, 0x11, 0x16, 0x78}, // 0x41 'A'
                        {0x7f, 0x49, 0x49, 0x49, 0x36}, // 0x42 'B'
                        {0x3e, 0x41, 0x41, 0x41, 0x22}, // 0x43 'C'
                        {0x7f, 0x41, 0x41, 0x22, 0x1c}, // 0x44 'D'
                        {0x7f, 0x49, 0x49, 0x41, 0x40}, // 0x45 'E'
                        {0x7f, 0x09, 0x09, 0x09, 0x01}, // 0x46 'F'
                        {0x3e, 0x41, 0x49, 0x49, 0x7a}, // 0x47 'G'
                        {0x7f, 0x08, 0x08, 0x08, 0x7f}, // 0x48 'H'
                        {0x41, 0x41, 0x7f, 0x41, 0x41}, // 0x49 'I'
                        {0x21, 0x41, 0x41, 0x3f, 0x01}, // 0x4a 'J'
                        {0x7f, 0x08, 0x14, 0x22, 0x41}, // 0x4b 'K'
                        {0x7f, 0x40, 0x40, 0x40, 0x40}, // 0x4c 'L'
                        {0x7f, 0x06, 0x08, 0x06, 0x7f}, // 0x4d 'M'
                        {0x7f, 0x06, 0x08, 0x30, 0x7f}, // 0x4e 'N'
                        {0x3e, 0x41, 0x41, 0x41, 0x3e}, // 0x4f 'O'
                        {0x7f, 0x09, 0x09, 0x09, 0x06}, // 0x50 'P'
                        {0x3e, 0x41, 0x51, 0x21, 0x5e}, // 0x51 'Q'
                        {0x7f, 0x09, 0x19, 0x29, 0x46}, // 0x52 'R'
                        {0x26, 0x49, 0x49, 0x49, 0x32}, // 0x53 'S'
                        {0x01, 0x01, 0x7f, 0x01, 0x01}, // 0x54 'T'
                        {0x3f, 0x40, 0x40, 0x40, 0x3f}, // 0x55 'U'
                        {0x0f, 0x30, 0x40, 0x30, 0x0f}, // 0x56 'V'
                        {0x1f, 0x60, 0x18, 0x60, 0x1f}, // 0x57 'W'
                        {0x63, 0x14, 0x08, 0x14, 0x63}, // 0x58 'X'
                        {0x03, 0x04, 0x78, 0x04, 0x03}, // 0x59 'Y'
                        {0x61, 0x51, 0x49, 0x45, 0x43}, // 0x5a 'Z'
                        {0x00, 0x00, 0x7f, 0x41, 0x41}, // 0x5b '['
                        {0x03, 0x04, 0x08, 0x10, 0x60}, // 0x5c '\'
                        {0x41, 0x41, 0x7f, 0x00, 0x00}, // 0x5d ']'
                        {0x04, 0x02, 0x01, 0x02, 0x04}, // 0x5e '^'
                        {0x40, 0x40, 0x40, 0x40, 0x40}, // 0x5f '_'
                        {0x00, 0x01, 0x02, 0x00, 0x00}, // 0x60 '`'
                        {0x30, 0x4a, 0x4a, 0x2a, 0x7c}, // 0x61 'a'
                        {0x7f, 0x48, 0x48, 0x48, 0x30}, // 0x62 'b'
                        {0x38, 0x44, 0x44, 0x44, 0x44}, // 0x63 'c'
                        {0x30, 0x48, 0x48, 0x48, 0x7f}, // 0x64 'd'
                        {0x38, 0x54, 0x54, 0x54, 0x58}, // 0x65 'e'
                        {0x08, 0x7e, 0x09, 0x09, 0x02}, // 0x66 'f'
                        {0x08, 0x54, 0x54, 0x54, 0x3c}, // 0x67 'g'
                        {0x7f, 0x10, 0x08, 0x08, 0x70}, // 0x68 'h'
                        {0x00, 0x48, 0x7a, 0x40, 0x00}, // 0x69 'i'
                        {0x00, 0x40, 0x48, 0x3a, 0x00}, // 0x6a 'j'
                        {0x7e, 0x10, 0x28, 0x44, 0x00}, // 0x6b 'k'
                        {0x02, 0x3c, 0x40, 0x40, 0x00}, // 0x6c 'l'
                        {0x78, 0x04, 0x38, 0x04, 0x78}, // 0x6d 'm'
                        {0x7C, 0x08, 0x04, 0x04, 0x78}, // 0x6e 'n'
                        {0x38, 0x44, 0x44, 0x44, 0x38}, // 0x6f 'o'
                        {0x7c, 0x14, 0x14, 0x08, 0x00}, // 0x70 'p'
                        {0x08, 0x14, 0x14, 0x7c, 0x00}, // 0x71 'q'
                        {0x7c, 0x08, 0x04, 0x04, 0x00}, // 0x72 'r'
                        {0x48, 0x54, 0x54, 0x54, 0x24}, // 0x73 's'
                        {0x00, 0x08, 0x3e, 0x48, 0x00}, // 0x74 't'
                        {0x3c, 0x40, 0x40, 0x20, 0x7c}, // 0x75 'u'
                        {0x0c, 0x30, 0x40, 0x30, 0x0c}, // 0x76 'v'
                        {0x1c, 0x60, 0x10, 0x60, 0x1c}, // 0x77 'w'
                        {0x44, 0x28, 0x10, 0x28, 0x44}, // 0x78 'x'
                        {0x4c, 0x50, 0x20, 0x10, 0x0c}, // 0x79 'y'
                        {0x44, 0x64, 0x54, 0x4c, 0x44}, // 0x7a 'z'
                        {0x00, 0x41, 0x41, 0x36, 0x08}, // 0x7b '{'
                        {0x00, 0x00, 0x7f, 0x00, 0x00}, // 0x7c '|'
                        {0x08, 0x36, 0x41, 0x41, 0x00}, // 0x7d '}'
                        {0x10, 0x08, 0x08, 0x08, 0x04}, // 0x7d '~'
                        {0x7f, 0x7f, 0x7f, 0x7f, 0x7f}}; // 0x7f 'DEL'
       
#endif // FONT_H_